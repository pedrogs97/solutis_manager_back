"""adjust role auth to group

Revision ID: 8531957a9853
Revises: 57fcee85687a
Create Date: 2023-12-13 21:11:36.188708

"""
from typing import Sequence, Union

import sqlalchemy as sa
from sqlalchemy.dialects import mysql

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "8531957a9853"
down_revision: Union[str, None] = "57fcee85687a"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "group",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("name", sa.String(length=50), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "group_permissions",
        sa.Column("group_id", sa.Integer(), nullable=True),
        sa.Column("permission_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["group_id"],
            ["group.id"],
        ),
        sa.ForeignKeyConstraint(
            ["permission_id"],
            ["permission.id"],
        ),
    )
    op.drop_constraint("user_ibfk_2", "user", type_="foreignkey")
    op.create_foreign_key(None, "user", "group", ["role_id"], ["id"])
    op.drop_table("role_permissions")
    op.drop_table("role")
    op.add_column(
        "employees", sa.Column("status", sa.String(length=100), nullable=False)
    )
    op.alter_column(
        "employees",
        "code",
        existing_type=mysql.INTEGER(),
        type_=sa.String(length=10),
        existing_nullable=False,
    )
    op.create_unique_constraint(None, "employees", ["status"])
    op.add_column(
        "employees_totvs", sa.Column("status", sa.String(length=100), nullable=True)
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, "user", type_="foreignkey")
    op.create_foreign_key("user_ibfk_2", "user", "role", ["role_id"], ["id"])
    op.drop_column("employees_totvs", "status")
    op.drop_constraint(None, "employees", type_="unique")
    op.alter_column(
        "employees",
        "code",
        existing_type=sa.String(length=10),
        type_=mysql.INTEGER(),
        existing_nullable=False,
    )
    op.drop_column("employees", "status")
    op.create_table(
        "role_permissions",
        sa.Column("role_id", mysql.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("permission_id", mysql.INTEGER(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["permission_id"], ["permission.id"], name="role_permissions_ibfk_1"
        ),
        sa.ForeignKeyConstraint(
            ["role_id"], ["role.id"], name="role_permissions_ibfk_2"
        ),
        mysql_collate="utf8mb4_0900_ai_ci",
        mysql_default_charset="utf8mb4",
        mysql_engine="InnoDB",
    )
    op.create_table(
        "role",
        sa.Column("id", mysql.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("name", mysql.VARCHAR(length=50), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        mysql_collate="utf8mb4_0900_ai_ci",
        mysql_default_charset="utf8mb4",
        mysql_engine="InnoDB",
    )
    op.drop_table("group_permissions")
    op.drop_table("group")
    # ### end Alembic commands ###
